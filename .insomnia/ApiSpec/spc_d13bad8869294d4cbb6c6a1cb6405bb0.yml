_id: spc_d13bad8869294d4cbb6c6a1cb6405bb0
type: ApiSpec
parentId: wrk_735b5f2b993d4dfeab05f0615da33e83
modified: 1612169960065
created: 1608230138068
fileName: learningOrchestra
contents: >+
  openapi: 3.0.0

  info:
    title: Learning Orchestra
    description: LearningOrchestra aims to facilitate the development of complex data mining workflows by seamlessly interfacing different data science tools and services. From a single interoperable Application Programming Interface (API), users can design their analytical pipelines and deploy them in an environment with the appropriate capabilities.
    version: v1.0
    contact:
      url: https://github.com/learningOrchestra/learningOrchestra
    license: 
      name: "GPL-3.0"
      url: "https://www.gnu.org/licenses/gpl-3.0.en.html"

  servers:
    - url: 'http://0.0.0.0'



   
  paths:
    /api/learningOrchestra/v1/dataset:
      post:
        tags:
         - dataset
        summary: Download a dataset from an URL
        description: Insert a CSV into the database using a public URI with direct file download.
        requestBody:
          required: True
          content:
            application/json:
             schema: 
                  type: object
                  properties:
                    datasetName:
                      type: string
                    datasetURI:
                      type: string
             example:
               {
                 "datasetName": "titanic",
                 "datasetURI": "www.somesite.com/path/to/dataset"
               }
        responses:
          '201':
            description: Return the location link from created dataset 
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The location from created dataset'
                example: 
                  {
                  'result': '/api/learningOrchestra/v1/dataset?titanicTrain?query={}&limit=10&skip=0'
                  }
          '406':
            description: The datasetURI is invalid
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'Error log'
                example: 
                  {
                  'result': 'invalid url'
                  }
          '409':
              description: The datasetName already exists
              content:
                application/json:
                  schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                  example: 
                    {
                    'result': 'duplicate file'
                    }
            
      get:
        tags:
        - dataset
        summary: List all datasets metadata
        description: Returns an array of datasets metadata, where each dataset contains a metadata file.

        responses:
          '200':
            description: An array of datasets metadata in result field
            content:
              application/json:
                schema: 
                    $ref: '#/components/schemas/datasetMetadata'
                example:
                   {
                    'result': [
                         {
                            "fields": [
                                "PassengerId",
                                "Survived",
                                "Pclass",
                                "Name",
                                "Sex",
                                "Age",
                                "SibSp",
                                "Parch",
                                "Ticket",
                                "Fare",
                                "Cabin",
                                "Embarked"
                            ],
                            "datasetName": "titanicTraining",
                            "finished": true,
                            "type": "dataset",
                            "timeCreated": "2020-07-28T22:16:10-00:00",
                            "url": "https://filebin.net/rpfdy8clm5984a4c/titanic_training.csv?t=gcnjz1yo"
                        }
                      ]
                    }
                  
    /api/learningOrchestra/v1/dataset/{datasetName}:
      get:
        tags:
           - dataset
        summary: List the dataset content
        description:  Returns rows of the dataset requested, with pagination, the first row in the query is always the metadata file.
        parameters:
          - name: datasetName
            in: path
            required: true
            description: the id of dataset.
            schema:
              type : string
          - name: skip
            in: query
            required: true
            description: the amount of rows to skip in pagination.
            schema:
              type : number
          - name: limit
            in: query
            required: true
            description: the amount of rows to limit after skipped rows in pagination, maximum limit to 20 rows.
            schema:
              type : number
          - name: query
            in: query
            required: true
            description: Query to find documents, if only pagination is requested, query should be empty curly brackets query={}.
            schema:
              type : string

        responses:
          '200':
            description: The paginated rows of a dataset
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: array
                       items: 
                         type: object
                       description: 'The rows from requested dataset'
                  example:
                    {
                      "result": [
                        {
                          "Age": "35",
                          "Cabin": "",
                          "Embarked": "S",
                          "Fare": "8.05",
                          "Name": "Allen, Mr. William Henry",
                          "Parch": "0",
                          "PassengerId": "5",
                          "Pclass": "3",
                          "Sex": "male",
                          "SibSp": "0",
                          "Survived": "0",
                          "Ticket": "373450",
                          "_id": 5
                        }
                      ]
                    }
        
      delete:
        tags:
           - dataset
        summary: Delete a inserted dataset
        description:  Delete an existent dataset in the database.
        parameters:
          - name: datasetName
            in: path
            required: true
            description: the id of dataset.
            schema:
              type : string
        responses:
          '200':
            description: Return the success message from deletion request
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The message from delete status'
                example: 
                  {'result': 'deleted file'}
                  
    /api/learningOrchestra/v1/transform/projection:
        post:
          tags:
           - projection
          summary: Create a projection dataset from an inserted dataset
          description: The projection resource makes a projection from some dataset inserted in dataset resource, generating a new dataset.
          requestBody:
            required: True
            content:
              application/json:
               schema: 
                    type: object
                    properties:
                      inputDatasetName:
                        type: string
                      outputDatasetName:
                        type: string
                      names:
                        type: array
                        items:
                          type: string
               example:
                  {
                      "inputDatasetName": "name of dataset to use",
                      "outputDatasetName": "name of projection dataset",
                      "names" : ["list", "of", "fields"]
                  }
          responses:
            '201':
              description: Return the location link from created dataset 
              content:
                application/json:
                  schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'The location from created dataset'
                  example: 
                    {
                    'result': '/api/learningOrchestra/v1/transform/projection?titanicTrainProj?query={}&limit=10&skip=0'
                    }
            '409':
                description: The outputDatasetName already exists
                content:
                  application/json:
                    schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'Error log'
                    example: 
                      {
                      'result': 'duplicated projection name'
                      }
            '406':
              description: There are conflicts with request data
              content:
                application/json:
                  schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'Error log'
                  examples:
                    duplicated projection name:
                      value:
                        {
                          'result': 'duplicated projection name'
                        }
                    missing fields:
                        value:
                          {
                            'result': 'missing fields'
                          }
                    invalid dataset name:
                      value:
                        {
                          'result': 'invalid dataset name'
                        }
                    unfinished dataset:
                      value:
                        {
                          'result': 'unfinished processing in input dataset'
                        }
                    
        get:
            tags:
            - projection
            summary: List all projections metadata
            description: Returns an array of projections metadata, where each dataset contains a metadata file.

            responses:
              '200':
                description: An array of datasets metadata in result field
                content:
                  application/json:
                    schema: 
                        $ref: '#/components/schemas/datasetMetadata'
                    example:
                       {
                        'result': [
                             {
                                "fields": [
                                    "PassengerId",
                                    "Survived",
                                    "Pclass",
                                    "Name",
                                    "Cabin",
                                    "Embarked"
                                ],
                                "parentDatasetName": "titanicTraining",
                                "datasetName": "titanicTrainingProjection",
                                "finished": true,
                                "type": "projection",
                                "timeCreated": "2020-07-28T22:16:10-00:00",
                                "url": "https://filebin.net/rpfdy8clm5984a4c/titanic_training.csv?t=gcnjz1yo"
                            }
                          ]
                        }  
    /api/learningOrchestra/v1/transform/projection/{projectionName}:
      get:
        tags:
           - projection
        summary: List the projection content
        description:  Returns rows of the projection requested, with pagination, the first row in the query is always the metadata file.
        parameters:
          - name: projectionName
            in: path
            required: true
            description: the id of projection.
            schema:
              type : string
          - name: skip
            in: query
            required: true
            description: the amount of rows to skip in pagination.
            schema:
              type : number
          - name: limit
            in: query
            required: true
            description: the amount of rows to limit after skipped rows in pagination, maximum limit to 20 rows.
            schema:
              type : number
          - name: query
            in: query
            required: true
            description: Query to find documents, if only pagination is requested, query should be empty curly brackets query={}.
            schema:
              type : string

        responses:
          '200':
            description: The paginated rows of a dataset
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: array
                       items: 
                         type: object
                       description: 'The rows from requested dataset'
                  example:
                    {
                      "result": [
                        {
                          "Pclass": "3",
                          "Sex": "male",
                          "SibSp": "0",
                          "Survived": "0",
                          "Ticket": "373450",
                          "_id": 5
                        }
                      ]
                    }
        
      delete:
        tags:
           - projection
        summary: Delete a created projection
        description:  Delete an existent projection in the database.
        parameters:
          - name: projectionName
            in: path
            required: true
            description: the id of projection.
            schema:
              type : string
        responses:
          '200':
            description: Return the success message from deletion request
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The message from delete status'
                example: 
                  {'result': 'deleted file'}

    /api/learningOrchestra/v1/transform/dataType:
        patch:
          tags:
           - dataType
          summary: Change the type of fields from a resource
          description: The request uses `inputDatasetName` as the dataset name to change the types of your fields. 
            The body request field *types* is a list of `Key:Value` which uses a *number* or *string* descriptor values in each field keys to describe the new value of altered field in resource.
          requestBody:
            required: True
            content:
              application/json:
               schema: 
                    type: object
                    properties:
                      inputDatasetName:
                        type: string
                      types:
                        type: object
               example:
                  {
                     "inputDatasetName": "titanicTrain",
                      "types": {
                          "Age": "number",
                          "Pclass": "string"
                      }
                  }
          responses:
            '200':
              description: Return the location link from altered dataset 
              content:
                application/json:
                  schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'The location from altered dataset'
                  example: 
                    {
                    'result': '/api/learningOrchestra/v1/dataset?titanicTrain?query={}&limit=10&skip=0'
                    }
            '406':
              description: There are wrong information in request data
              content:
                application/json:
                  schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'Error log'
                  examples:
                    invalid fields:
                      value:
                        {
                          'result': 'invalid fields'
                        }
                    missing fields:
                        value:
                          {
                            'result': 'missing fields'
                          }
                    invalid dataset name:
                      value:
                        {
                          'result': 'invalid dataset name'
                        }
                    unfinished dataset:
                      value:
                        {
                          'result': 'unfinished processing in input dataset'
                        }

    /api/learningOrchestra/v1/explore/histogram:
          post:
            tags:
             - histogram
            summary: Create a histogram from a resource
            description: The request is sent in the body, `inputDatasetName` is the name from used dataset and the `outputDatasetName` is the name of the file in which the histogram result is saved. 
              The `names` is an array with all the fields necessary to make the histogram.
            requestBody:
              required: True
              content:
                application/json:
                 schema: 
                      type: object
                      properties:
                        inputDatasetName:
                          type: string
                        outputDatasetName:
                          type: string
                        names:
                          type: array
                          items:
                            type: string
                 example:
                    {
                        "inputDatasetName": "name of dataset to use",
                        "outputDatasetName": "name to histogram dataset",
                        "names" : ["list", "of", "fields"]
                    }
            responses:
              '201':
                description: Return the location link from created histogram 
                content:
                  application/json:
                    schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'The location from created histogram'
                    example: 
                      {
                      'result': '/api/learningOrchestra/v1/explore/histogram?titanicTrainHistogram?query={}&limit=10&skip=0'
                      }
              '409':
                  description: The outputDatasetName already exists
                  content:
                    application/json:
                      schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'Error log'
                      example: 
                        {
                        'result': 'duplicated projection name'
                        }
              '406':
                description: There are conflicts with request data
                content:
                  application/json:
                    schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'Error log'
                    examples:
                      invalid fields:
                        value:
                          {
                            'result': 'invalid fields'
                          }
                      missing fields:
                        value:
                          {
                            'result': 'missing fields'
                          }
                      invalid dataset name:
                        value:
                          {
                            'result': 'invalid dataset name'
                          }
                      unfinished dataset:
                        value:
                          {
                            'result': 'unfinished processing in input dataset'
                          }

          get:
              tags:
              - histogram
              summary: List all histogram datasets metadata
              description: Returns an array of histogram datasets metadata, where each dataset contains a metadata file.
              responses:
                '200':
                  description: An array of datasets metadata in result field
                  content:
                    application/json:
                      schema: 
                          $ref: '#/components/schemas/datasetMetadata'
                      example:
                         {
                          'result': [
                               {
                                  "fields": [
                                      "PassengerId",
                                      "Survived",
                                      "Pclass",
                                      "Name",
                                      "Cabin",
                                      "Embarked"
                                  ],
                                  "parentDatasetName": "titanicTraining",
                                  "datasetName": "titanicTrainingProjection",
                                  "finished": true,
                                  "type": "histogram",
                                  "timeCreated": "2020-07-28T22:16:10-00:00",
                                  "url": "https://filebin.net/rpfdy8clm5984a4c/titanic_training.csv?t=gcnjz1yo"
                              }
                            ]
                          }  
    /api/learningOrchestra/v1/explore/histogram/{histogramName}:
      get:
        tags:
           - histogram
        summary: Returns rows of the histogram requested, with pagination.
        description:  Returns an array of histogram datasets rows, The first row in the query is always the metadata file.

        parameters:
          - name: histogramName
            in: path
            required: true
            description: the id of histogram.
            schema:
              type : string
          - name: skip
            in: query
            required: true
            description: the amount of rows to skip in pagination.
            schema:
              type : number
          - name: limit
            in: query
            required: true
            description: the amount of rows to limit after skipped rows in pagination, maximum limit to 20 rows.
            schema:
              type : number
          - name: query
            in: query
            required: true
            description: Query to find documents, if only pagination is requested, query should be empty curly brackets query={}.
            schema:
              type : string

        responses:
          '200':
            description: The paginated rows of a histogram
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: array
                       items:
                         type: object
                       description: 'The rows from requested histogram'
                  example:
                    {
                      "result": [
                      {
                          "Sex": "male",
                          "SibSp": "0",
                          "Survived": "0",
                          "Ticket": "373450",
                          "_id": 5
                        }
                      ]
                    }

      delete:
        tags:
           - histogram
        summary: Delete a created histogram
        description:  Delete an existent histogram in the database.
        parameters:
          - name: histogramName
            in: path
            required: true
            description: the id of histogram.
            schema:
              type : string
        responses:
          '200':
            description: Return the success message from deletion request
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The message from delete status'
                example: 
                  {'result': 'deleted file'}

    /api/learningOrchestra/v1/explore/scikitLearn:
          post:
            tags:
             - explore
            summary: create a plot with output method from skicitLearn.
            description: create a plot with output method from skicitLearn, the output is passed to a plot lib, generating a image from data.
            requestBody:
              required: True
              content:
                application/json:
                 schema: 
                      type: object
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        modulePath:
                          type: string
                        class:
                          type: string
                        classParameters:
                          type: object
                          description: A json object specifying the name of parameter and the value, case you want pass a instance from a learningOrchestra service as a parameter value, 
                            like dataset or projection, you need put the character key '$', if you like pass one column from this instance, put the charater key '.' between
                            the instance name and column name. e.g '$myDataSet.columnName' to pass a specific column, or '$myDataset', to pass the entire dataset as parameter.
                        method:
                          type: string
                        methodParameters:
                          type: object
                          description: A json object specifying the name of parameter and the value, case you want pass a instance from a learningOrchestra service as a parameter value, 
                            like dataset or projection, you need put the character key '$', if you like pass one column from this instance, put the charater key '.' between
                            the instance name and column name. e.g '$myDataSet.columnName' to pass a specific column, or '$myDataset', to pass the entire dataset as parameter.
                 example:
                    {
                      "name": "PCA",
                      "description": "Some description",
                      "modulePath": "sklearn.decomposition",
                      "class": "PCA",
                      "classParameters": {},
                      "method": "fit_transform",
                      "methodParameters": {
                                    "X": "$titanicTrainHotEncoded"
                      }
                    }

            responses:
              '201':
                description: Return the location link from created image plot 
                content:
                  application/json:
                    schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'The location from created plot'
                    example: 
                      {
                        'result': '/api/learningOrchestra/v1/explore/scikitLearn/PCA'
                      }
              '409':
                  description: The name already exists
                  content:
                    application/json:
                      schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'Error log'
                      example: 
                        {
                        'result': 'duplicated name'
                        }
              '406':
                description: There are conflicts with request data
                content:
                  application/json:
                    schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'Error log'
                    examples:
                      invalid module path name:
                        value:
                          {
                            'result': 'invalid module path name'
                          }
                      invalid method name:
                        value:
                          {
                            'result': 'invalid method name'
                          }
                      invalid class method parameter:
                        value:
                          {
                            'result': 'invalid class method parameter'
                          }
                      parent name doesn't exist:
                        value:
                          {
                            'result': "parent name doesn't exist"
                          }
                      invalid class name:
                        value:
                          {
                            'result': 'invalid class name'
                          }
                      invalid class parameter:
                        value:
                          {
                            'result': 'invalid class parameter'
                          }
                          
          get:
              tags:
              - explore
              summary: Read the names of the created plots
              description: Returns a list with all created plots metadata.
              responses:
                '200':
                  description: An array of plots name in result field
                  content:
                    application/json:
                      schema: 
                          type: object
                          properties:
                            result:
                              type: array
                              items:
                                type: string
                      example:
                            {
                              "result": [
                                {
                                  "class": "PCA",
                                  "classParameters": {
                                    "n_components": 2
                                  },
                                  "executions": [],
                                  "finished": true,
                                  "modulePath": "sklearn.decomposition",
                                  "name": "PCA_5",
                                  "timeCreated": "2021-01-24T18:34:43-00:00",
                                  "type": "explore"
                                },
                                {
                                  "class": "PCA",
                                  "classParameters": {
                                    "n_components": 2
                                  },
                                  "finished": false,
                                  "modulePath": "sklearn.decomposition",
                                  "name": "PCA_8",
                                  "timeCreated": "2021-01-27T10:35:05-00:00",
                                  "type": "explore"
                                }
                               ]
                            }
                            
    /api/learningOrchestra/v1/explore/scikitLearn/{name}:
          patch:
            tags:
             - explore
            summary: update a plot running again the class method.
            description: update a plot running again the class method.
            parameters:
                - name: name
                  in: path
                  required: true
                  description: the id of created plot.
                  schema:
                    type : string
            requestBody:
              required: True
              content:
                application/json:
                 schema: 
                      type: object
                      properties:
                        method:
                          type: string
                        methodParameters:
                          type: object
                          description: A json object specifying the name of parameter and the value, case you want pass a instance from a learningOrchestra service as a parameter value, 
                            like dataset or projection, you need put the character key '$', if you like pass one column from this instance, put the charater key '.' between
                            the instance name and column name. e.g '$myDataSet.columnName' to pass a specific column, or '$myDataset', to pass the entire dataset as parameter.
                 example:
                    {
                      "method": "fit",
                      "methodParameters": {
                                    "X": [[0, 1], [1, 2], [2, 4]],
                                    "y": [[0, 0], [1, 1], [2, 3]]
                      }
                    }

            responses:
              '201':
                description: Return the location link from created image plot 
                content:
                  application/json:
                    schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'The location from created plot'
                    example: 
                      {
                        'result': '/api/learningOrchestra/v1/explore/scikitLearn/PCA'
                      }
              '406':
                description: There are conflicts with request data
                content:
                  application/json:
                    schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'Error log'
                    examples:
                      invalid method name:
                        value:
                          {
                            'result': 'invalid method name'
                          }
                      invalid class method parameter:
                        value:
                          {
                            'result': 'invalid class method parameter'
                          }
      
          get:
              tags:
                 - explore
              summary: Read an image plot
              description: Returns the image plot of the specified name.

              parameters:
                - name: name
                  in: path
                  required: true
                  description: the id of plot.
                  schema:
                    type : string

              responses:
                '200':
                  description: Return the image plot
                  content:
                    image/png:
                       schema:
                        type: string
                        format: binary

                '404':
                  description: Plot name does not found
                  content:
                    application/json:
                      schema: 
                          type: object
                          properties:
                             result:
                               type: string
                               description: 'Error log'
                      example:
                        {
                          'result': "parent name doesn't exist"
                        }

          delete:
              tags:
                 - explore
              summary: Delete a created image plot
              description:  Delete an existent image plot in the database.
              parameters:
                - name: name
                  in: path
                  required: true
                  description: the id of image plot.
                  schema:
                    type : string
              responses:
                '200':
                  description: Return the success message from deletion request
                  content:
                    application/json:
                      schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'The message from delete status'
                      example: 
                        {'result': 'deleted file'}
                '404':
                  description: Plot name does not found
                  content:
                    application/json:
                      schema: 
                          type: object
                          properties:
                             result:
                               type: string
                               description: 'Error log'
                      example:
                        {
                          'result': "parent name doesn't exist"
                        }
                  
                 
    /api/learningOrchestra/v1/explore/scikitLearn/{name}/metadata:
           get:
              tags:
                 - explore
              summary: Read a plot metadata
              description: Returns the plot metadata of the specified name.

              parameters:
                - name: name
                  in: path
                  required: true
                  description: the id of plot.
                  schema:
                    type : string

              responses:
                '200':
                  description: Return the plot metadata
                  content:
                      application/json:
                                    schema: 
                                      type: object
                                      properties:
                                         result:
                                           type: array
                                           items:
                                             type: object
                                           description: 'The rows from requested metadata'
                                      example:
                                         {
                                            "result": [
                                              {
                                                "_id": 0,
                                                "class": "PCA",
                                                "classParameters": {},
                                                "finished": true,
                                                "modulePath": "sklearn.decomposition",
                                                "name": "PCA_11",
                                                "timeCreated": "2021-01-27T11:02:49-00:00",
                                                "type": "explore"
                                              },
                                              {
                                                "_id": 1,
                                                "description": "Some description",
                                                "exception": null,
                                                "method": "fit_transform",
                                                "methodParameters": {
                                                  "X": "$titanic_train_hotEncoded11"
                                                }
                                              }
                                            ]
                                          }

                '404':
                  description: Plot name does not found
                  content:
                    application/json:
                      schema: 
                          type: object
                          properties:
                             result:
                               type: string
                               description: 'Error log'
                      example:
                        {
                          'result': "parent name doesn't exist"
                        }
                        
    /api/learningOrchestra/v1/transform/scikitLearn:
          post:
            tags:
             - transform
            summary: transform a service instance from learningOrchestra using the sklearn lib.
            description:  transform a service instance from learningOrchestra using the sklearn lib.
            requestBody:
              required: True
              content:
                application/json:
                 schema: 
                      type: object
                      properties:
                        name:
                          type: string
                        description:
                          type: string
                        modulePath:
                          type: string
                        class:
                          type: string
                        classParameters:
                          type: object
                          description: A json object specifying the name of parameter and the value, case you want pass a instance from a learningOrchestra service as a parameter value, 
                            like dataset or projection, you need put the character key '$', if you like pass one column from this instance, put the charater key '.' between
                            the instance name and column name. e.g '$myDataSet.columnName' to pass a specific column, or '$myDataset', to pass the entire dataset as parameter.
                        method:
                          type: string
                        methodParameters:
                          type: object
                          description: A json object specifying the name of parameter and the value, case you want pass a instance from a learningOrchestra service as a parameter value, 
                            like dataset or projection, you need put the character key '$', if you like pass one column from this instance, put the charater key '.' between
                            the instance name and column name. e.g '$myDataSet.columnName' to pass a specific column, or '$myDataset', to pass the entire dataset as parameter.
                 example:
                    {
                      "name": "titanic_train_hotEncoded",
                      "description": "Some description",
                      "modulePath": "sklearn.preprocessing",
                      "class": "LabelEncoder",
                      "classParameters": {},
                      "method": "fit_transform",
                      "methodParameters": {
                                    "y": "$dataset.Variable_category"
                      }
                    }

            responses:
              '201':
                description: Return the location link from created image plot 
                content:
                  application/json:
                    schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'The location from created plot'
                    example: 
                      {
                        'result': '/api/learningOrchestra/v1/transform//scikitLearn/titanic_train_hotEncoded?query={}&limit=20&skip=0'
                      }
              '409':
                  description: The name already exists
                  content:
                    application/json:
                      schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'Error log'
                      example: 
                        {
                        'result': 'duplicated name'
                        }
              '406':
                description: There are conflicts with request data
                content:
                  application/json:
                    schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'Error log'
                    examples:
                      invalid module path name:
                        value:
                          {
                            'result': 'invalid module path name'
                          }
                      invalid method name:
                        value:
                          {
                            'result': 'invalid method name'
                          }
                      invalid class method parameter:
                        value:
                          {
                            'result': 'invalid class method parameter'
                          }
                      parent name doesn't exist:
                        value:
                          {
                            'result': "parent name doesn't exist"
                          }
                      invalid class name:
                        value:
                          {
                            'result': 'invalid class name'
                          }
                      invalid class parameter:
                        value:
                          {
                            'result': 'invalid class parameter'
                          }
                          
          get:
              tags:
              - transform
              summary: Read the metadata of the created transforms
              description: Returns a list with transforms metadata.
              responses:
                '200':
                  description: An array of plots name in result field
                  content:
                    application/json:
                      schema: 
                          type: object
                          properties:
                            result:
                              type: array
                              items:
                                type: string
                      example:
                          {
                            "result": [
                              {
                                "class": "OneHotEncoder",
                                "classParameters": {},
                                "executions": [],
                                "finished": false,
                                "modulePath": "sklearn.preprocessing",
                                "name": "titanic_train_hotEncoded6",
                                "timeCreated": "2021-01-27T09:30:03-00:00",
                                "type": "transform"
                              },
                              {
                                "class": "LabelEncoder",
                                "classParameters": {},
                                "finished": true,
                                "modulePath": "sklearn.preprocessing",
                                "name": "titanic_train_hotEncoded11",
                                "timeCreated": "2021-01-27T10:30:50-00:00",
                                "type": "transform"
                              }
                             ]
                           }
                           
    /api/learningOrchestra/v1/transform/scikitLearn/{name}:
          patch:
            tags:
             - transform
            summary: update a transform running again the class method.
            description: update a transform running again the class method.
            parameters:
                - name: name
                  in: path
                  required: true
                  description: the id of created transform.
                  schema:
                    type : string
            requestBody:
              required: True
              content:
                application/json:
                 schema: 
                      type: object
                      properties:
                        method:
                          type: string
                        methodParameters:
                          type: object
                          description: A json object specifying the name of parameter and the value, case you want pass a instance from a learningOrchestra service as a parameter value, 
                            like dataset or projection, you need put the character key '$', if you like pass one column from this instance, put the charater key '.' between
                            the instance name and column name. e.g '$myDataSet.columnName' to pass a specific column, or '$myDataset', to pass the entire dataset as parameter.
                 example:
                    {
                      "method": "fit",
                      "methodParameters": {
                                    "X": [[0, 1], [1, 2], [2, 4]],
                                    "y": [[0, 0], [1, 1], [2, 3]]
                      }
                    }

            responses:
              '201':
                description: Return the location link from created transform
                content:
                  application/json:
                    schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'The location from created transform'
                    example: 
                      {
                        'result': '/api/learningOrchestra/v1/transform//scikitLearn/titanic_train_hotEncoded?query={}&limit=20&skip=0'
                      }
              '406':
                description: There are conflicts with request data
                content:
                  application/json:
                    schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'Error log'
                    examples:
                      invalid method name:
                        value:
                          {
                            'result': 'invalid method name'
                          }
                      invalid class method parameter:
                        value:
                          {
                            'result': 'invalid class method parameter'
                          }
      
          get:
              tags:
                 - transform
              summary: Read a transform metadata
              description: Returns the metadata of the specified name.

              parameters:
                - name: name
                  in: path
                  required: true
                  description: the id of transform.
                  schema:
                    type : string

              responses:
                '200':
                  description: Return the transform metadata
                  content:
                    application/json:
                      schema: 
                          type: object
                          properties:
                            result:
                              type: array
                              items:
                                type: string
                      example:
                          {
                            "result": [
                              {
                                "_id": 0,
                                "class": "LabelEncoder",
                                "classParameters": {},
                                "finished": true,
                                "modulePath": "sklearn.preprocessing",
                                "name": "titanic_train_hotEncoded11",
                                "timeCreated": "2021-01-27T10:30:50-00:00",
                                "type": "transform"
                              },
                              {
                                "_id": 1,
                                "description": "Some description",
                                "exception": null,
                                "method": "fit_transform",
                                "methodParameters": {
                                  "y": "$dataset.Variable_category"
                                }
                              }
                            ]
                          }

                '404':
                  description: transform name does not found
                  content:
                    application/json:
                      schema: 
                          type: object
                          properties:
                             result:
                               type: string
                               description: 'Error log'
                      example:
                        {
                          'result': "parent name doesn't exist"
                        }

          delete:
              tags:
                 - transform
              summary: Delete a created transform
              description:  Delete an existent transform in the database.
              parameters:
                - name: name
                  in: path
                  required: true
                  description: the id of transform.
                  schema:
                    type : string
              responses:
                '200':
                  description: Return the success message from deletion request
                  content:
                    application/json:
                      schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'The message from delete status'
                      example: 
                        {'result': 'deleted file'}
                '404':
                  description: Transform does not found
                  content:
                    application/json:
                      schema: 
                          type: object
                          properties:
                             result:
                               type: string
                               description: 'Error log'
                      example:
                        {
                          'result': "parent name doesn't exist"
                        }
                        
    /api/learningOrchestra/v1/builder:
        post:
          tags:
           - builder
          summary: Create a builder
          description: Create predictions for some dataset
          requestBody:
            required: True
            content:
              application/json:
               schema: 
                    type: object
                    properties:
                      trainDatasetName:
                        type: string
                      testDatasetName:
                        type: string
                      modelingCode:
                        type: string
                        description: |
                          # Environment
                            The python 3 modeling code must use the environment instances in bellow:

                            * `training_df` (Instantiated): Spark Dataframe instance of train dataset
                            * `testing_df` (Instantiated): Spark Dataframe instance of testing dataset
                            
                            
                            The modeling code must instantiate the variables in below, all instances must be transformed by pyspark VectorAssembler:

                            * `features_training` (Not Instantiated): Spark Dataframe instance for train the model
                            * `features_evaluation` (Not Instantiated): Spark Dataframe instance for evaluating trained model accuracy
                            * `features_testing` (Not Instantiated): Spark Dataframe instance for testing the model
                            In case you don't want to evaluate the model, set `features_evaluation` as `None`.
                          # Example
                          ```python
                          from pyspark.ml import Pipeline
                          from pyspark.sql.functions import (
                              mean, col, split,
                              regexp_extract, when, lit)

                          from pyspark.ml.feature import (
                              VectorAssembler,
                              StringIndexer
                          )

                          TRAINING_DF_INDEX = 0
                          TESTING_DF_INDEX = 1

                          training_df = training_df.withColumnRenamed('Survived', 'label')
                          testing_df = testing_df.withColumn('label', lit(0))
                          datasets_list = [training_df, testing_df]

                          for index, dataset in enumerate(datasets_list):
                              dataset = dataset.withColumn(
                                  "Initial",
                                  regexp_extract(col("Name"), "([A-Za-z]+)\.", 1))
                              datasets_list[index] = dataset

                          misspelled_initials = [
                              'Mlle', 'Mme', 'Ms', 'Dr',
                              'Major', 'Lady', 'Countess',
                              'Jonkheer', 'Col', 'Rev',
                              'Capt', 'Sir', 'Don'
                          ]
                          correct_initials = [
                              'Miss', 'Miss', 'Miss', 'Mr',
                              'Mr', 'Mrs', 'Mrs',
                              'Other', 'Other', 'Other',
                              'Mr', 'Mr', 'Mr'
                          ]
                          for index, dataset in enumerate(datasets_list):
                              dataset = dataset.replace(misspelled_initials, correct_initials)
                              datasets_list[index] = dataset


                          initials_age = {"Miss": 22,
                                          "Other": 46,
                                          "Master": 5,
                                          "Mr": 33,
                                          "Mrs": 36}
                          for index, dataset in enumerate(datasets_list):
                              for initial, initial_age in initials_age.items():
                                  dataset = dataset.withColumn(
                                      "Age",
                                      when((dataset["Initial"] == initial) &
                                           (dataset["Age"].isNull()), initial_age).otherwise(
                                              dataset["Age"]))
                                  datasets_list[index] = dataset


                          for index, dataset in enumerate(datasets_list):
                              dataset = dataset.na.fill({"Embarked": 'S'})
                              datasets_list[index] = dataset


                          for index, dataset in enumerate(datasets_list):
                              dataset = dataset.withColumn("Family_Size", col('SibSp')+col('Parch'))
                              dataset = dataset.withColumn('Alone', lit(0))
                              dataset = dataset.withColumn(
                                  "Alone",
                                  when(dataset["Family_Size"] == 0, 1).otherwise(dataset["Alone"]))
                              datasets_list[index] = dataset


                          text_fields = ["Sex", "Embarked", "Initial"]
                          for column in text_fields:
                              for index, dataset in enumerate(datasets_list):
                                  dataset = StringIndexer(
                                      inputCol=column, outputCol=column+"_index").\
                                          fit(dataset).\
                                          transform(dataset)
                                  datasets_list[index] = dataset


                          non_required_columns = ["Name", "Embarked", "Sex", "Initial"]
                          for index, dataset in enumerate(datasets_list):
                              dataset = dataset.drop(*non_required_columns)
                              datasets_list[index] = dataset


                          training_df = datasets_list[TRAINING_DF_INDEX]
                          testing_df = datasets_list[TESTING_DF_INDEX]

                          assembler = VectorAssembler(
                              inputCols=training_df.columns[:],
                              outputCol="features")
                          assembler.setHandleInvalid('skip')

                          features_training = assembler.transform(training_df)
                          (features_training, features_evaluation) =\
                              features_training.randomSplit([0.8, 0.2], seed=33)
                          features_testing = assembler.transform(testing_df)
                          ```
                      classifiersList:
                        type: array
                        items:
                          type: string
                        description: |
                          # List of Classifiers
                          * `LR`: LogisticRegression
                          * `DT`: DecisionTreeClassifier
                          * `RF`: RandomForestClassifier
                          * `GB`: Gradient-boosted tree classifier
                          * `NB`: NaiveBayes
               example:
                  {
                      "trainDatasetName": "titanicTrain",
                      "testDatasetName": "titanicTest",
                      "modelingCode": "Python3 code to preprocessing, using Pyspark library",
                      "classifiersList": ["LR", "DT", "RF"]
                  }
          responses:
            '201':
              description: Return the location links from created predictions 
              content:
                application/json:
                  schema: 
                    type: object
                    properties:
                       result:
                         type: array
                         items:
                           type: string
                         description: 'The location from created predictions'
                  example: 
                    {
                    'result': [
                      '/api/learningOrchestra/v1/builder?titanicTestLR?query={}&limit=10&skip=0',
                      '/api/learningOrchestra/v1/builder?titanicTestDT?query={}&limit=10&skip=0',
                      '/api/learningOrchestra/v1/builder?titanicTestRF?query={}&limit=10&skip=0',
                      ]
                    }
            '406':
              description: There are conflicts with request data
              content:
                application/json:
                  schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'Error log'
                  examples:
                    invalid classifier name:
                      value:
                        {
                          'result': 'invalid classifier name'
                        }
                    invalid dataset name:
                      value:
                        {
                          'result': 'invalid dataset name'
                        }
                    unfinished dataset:
                      value:
                        {
                          'result': 'unfinished processing in input dataset'
                        }
                    
        get:
            tags:
            - builder
            summary: List all builder predictions metadata
            description: Returns an array of predictions metadata, where each dataset contains a metadata file.

            responses:
              '200':
                description: An array of predictions metadata in result field
                content:
                  application/json:
                    schema: 
                        $ref: '#/components/schemas/datasetMetadata'
                    example:
                       {
                        'result': [
                             {
                                "fields": [
                                    "PassengerId",
                                    "Survived",
                                    "Pclass",
                                    "Name",
                                    "Cabin",
                                    "Embarked"
                                ],
                                "parentDatasetName": ["titanicTrain", "titanicTest"],
                                "classifier": "LR",
                                "datasetName": "titanicTestLR",
                                "finished": true,
                                "type": "builder",
                                "timeCreated": "2020-07-28T22:16:10-00:00",
                                "url": "https://filebin.net/rpfdy8clm5984a4c/titanic_training.csv?t=gcnjz1yo"
                            }
                          ]
                        }  
    /api/learningOrchestra/v1/builder/{predictionName}:
      get:
        tags:
           - builder
        summary: List builder dataset content
        description:  Returns rows of the projection requested, with pagination, the first row in the query is always the metadata file.
        parameters:
          - name: predictionName
            in: path
            required: true
            description: the id of builder prediction.
            schema:
              type : string
          - name: skip
            in: query
            required: true
            description: the amount of rows to skip in pagination.
            schema:
              type : number
          - name: limit
            in: query
            required: true
            description: the amount of rows to limit after skipped rows in pagination, maximum limit to 20 rows.
            schema:
              type : number
          - name: query
            in: query
            required: true
            description: Query to find documents, if only pagination is requested, query should be empty curly brackets query={}.
            schema:
              type : string

        responses:
          '200':
            description: The paginated rows of a dataset
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: array
                       items: 
                         type: object
                       description: 'The rows from requested dataset'
                  example:
                    {
                      "result": [
                        {
                          "Pclass": "3",
                          "Sex": "male",
                          "SibSp": "0",
                          "Survived": "0",
                          "Ticket": "373450",
                          "_id": 5
                        }
                      ]
                    }
        
      delete:
        tags:
           - builder
        summary: Delete a created prediction
        description:  Delete an existent builder prediction in the database.
        parameters:
          - name: predictionName
            in: path
            required: true
            description: the id of prediction.
            schema:
              type : string
        responses:
          '200':
            description: Return the success message from deletion request
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The message from delete status'
                example: 
                  {'result': 'deleted file'}
                  
   

    /api/learningOrchestra/v1/model/scikitLearn:
      post:
        tags:
         - model
        summary: Responsible to load supervised or unsupervised models from existing python libs.
        description: Create models objects with customized parameters.
        requestBody:
          required: True
          content:
            application/json:
             schema: 
                  type: object
                  properties:
                    modelName:
                      type: string
                      description: The name id of model instance
                    description:
                      type: string
                      description: Some description of model instance
                    modulePath:
                      type: string
                      description: The path used to reach the Model Class, including the used library
                    class:
                      type: string
                      description: The class name of model
                    classParameters:
                      type: object
                      description: An object with key:value parameters names and values
                    
             example:
              {
                "modelName": "multiTaskLassoInstance",
                "description": "Some description",
                "modulePath": "sklearn.linear_model",
                "class": "MultiTaskLasso",
                "classParameters": {"alpha": 0.1}
              }
        responses:
          '201':
            description: Return the location link from created model 
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The location from created model'
                example: 
                  {
                  'result': '/api/learningOrchestra/v1/model/default?multiTaskLassoInstance?query={}&limit=10&skip=0'
                  }
                  
          '406':
            description: There are conflicts with request data
            content:
              application/json:
                schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                examples:
                  invalid module path name:
                    value:
                      {
                        'result': 'invalid module path name'
                      }
                  invalid class name:
                    value:
                      {
                        'result': 'invalid class name'
                      }
                  invalid class parameter:
                    value:
                      {
                        'result': 'invalid class parameter'
                      }
          '409':
              description: The modelName already exists
              content:
                application/json:
                  schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                  example: 
                    {
                    'result': 'duplicated model name'
                    }
            
      get:
        tags:
        - model
        summary: List all models metadata
        description: Returns an array of models metadata, where each model contains a metadata file.

        responses:
          '200':
            description: An array of models metadata in result field
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                    result:
                      type: array
                      items:
                        type: object
                        properties:
                         class:
                           type: string
                           description: 'The model class'
                         finished:
                           type: boolean
                           description: 'A flag with request processing status'
                         modelName:
                           type: string
                           description: 'The identification name of model'
                         modulePath:
                           type: string
                           description: "The model class path from used library"
                         timeCreated:
                           type: string
                           description: "A string whit formated time"
                         type:
                           type: string
                           description: 'the entity which dataset belongs'
                example:
                   {
                    'result': [
                              {
                                "class": "RandomForestClassifier",
                                "finished": true,
                                "modelName": "randomForest",
                                "modulePath": "sklearn.ensemble",
                                "timeCreated": "2021-01-02T13:06:05-00:00",
                                "type": "defaultModel"
                              },
                              {
                                "class": "AdaBoostClassifier",
                                "finished": true,
                                "modelName": "AdaBoost",
                                "modulePath": "sklearn.ensemble",
                                "timeCreated": "2021-01-05T11:09:56-00:00",
                                "type": "defaultModel"
                              }
                        ]
                    }
                  
    /api/learningOrchestra/v1/model/scikitLearn/{modelName}:
      patch:
        tags:
           - model
        summary: update a model instance
        description:  Update the object from model class with new parameters in class constructor
        parameters:
          - name: modelName
            in: path
            required: true
            description: the id of model.
            schema:
              type : string
        responses:
          '201':
            description: Return the location link from created model 
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The location from created model'
                example: 
                  {
                  'result': '/api/learningOrchestra/v1/model/default?multiTaskLassoInstance?query={}&limit=10&skip=0'
                  }
                  
          '406':
            description: There are conflicts with request data
            content:
              application/json:
                schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                examples:
                  nonexistent model filename:
                    value:
                      {
                        'result': 'duplicated model name'
                      }
                  invalid function parameters:
                    value:
                      {
                        'result': "model name doesn't exist"
                      }
                    
      get:
        tags:
           - model
        summary: List the model metadata executions
        description:  Returns rows of the requested model, with pagination, the first row in the query is always the metadata file from model instance,
          other lines are the PATCH request metadata from updated model instances
        parameters:
          - name: modelName
            in: path
            required: true
            description: the name id of model.
            schema:
              type : string
          - name: skip
            in: query
            required: true
            description: the amount of rows to skip in pagination.
            schema:
              type : number
          - name: limit
            in: query
            required: true
            description: the amount of rows to limit after skipped rows in pagination, maximum limit to 20 rows.
            schema:
              type : number
          - name: query
            in: query
            required: true
            description: Query to find documents, if only pagination is requested, query should be empty curly brackets query={}.
            schema:
              type : string

        responses:
          '200':
            description: The paginated documents of a model
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: array
                       items: 
                         type: object
                       description: 'The metadata executions from requested model'
                  example:
                      {
                        "result": [
                          {
                            "_id": 0,
                            "class": "BaggingRegressor",
                            "finished": true,
                            "modelName": "BaggingRegressor",
                            "modulePath": "sklearn.ensemble",
                            "timeCreated": "2021-01-13T13:39:56-00:00",
                            "type": "defaultModel"
                          },
                          {
                            "_id": 1,
                            "classParameters": {},
                            "description": "Some description",
                            "exception": null
                          }
                        ]
                      }
        
      delete:
        tags:
           - model
        summary: Delete a model instance
        description:  Delete an existent model instance.
        parameters:
          - name: modelName
            in: path
            required: true
            description: the id of model.
            schema:
              type : string
        responses:
          '200':
            description: Return the success message from deletion request
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The message from delete status'
                example: 
                  {'result': 'deleted file'}


    /api/learningOrchestra/v1/train/scikitLearn:
      post:
        tags:
         - train
        summary: Train created models.
        description: This resource trains models with yours class methods.
        requestBody:
          required: True
          content:
            application/json:
             schema: 
                  type: object
                  properties:
                    parentName:
                      type: string
                      description: The name id of object to use
                    name:
                      type: string
                      description: The name id to identify the instance
                    description:
                      type: string
                      description: Some description of instance
                    method:
                      type: string
                      description: The method to use from class object
                    methodParameters:
                      type: object
                      description: An object with key:value parameters names and values
                    
             example:
                {
                  "parentName": "MultiTaskLasso",
                  "name": "MultiTaskLasso",
                  "description": "some description",
                  "method": "fit",
                  "methodParameters": {
                              "X": [[0, 1], [1, 2], [2, 4]],
                              "y": [[0, 0], [1, 1], [2, 3]]
                  }
                }
        responses:
          '201':
            description: Return the location link from created resource 
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The location from created resource'
                example: 
                  {
                  'result': '/api/learningOrchestra/v1/train?MultiTaskLasso?query={}&limit=10&skip=0'
                  }
                  
          '406':
            description: There are conflicts with request data
            content:
              application/json:
                schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                examples:
                  invalid parent name:
                    value:
                      {
                        'result': "parentName doesn't exist"
                      }
                  invalid class method name:
                    value:
                      {
                        'result': 'invalid class method parameter'
                      }
                  invalid method name:
                    value:
                      {
                        'result': 'invalid method name'
                      }
                  invalid module path name:
                    value:
                      {
                        'result': 'invalid module path name'
                      }
          '409':
              description: The name already exists
              content:
                application/json:
                  schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                  example: 
                    {
                    'result': 'duplicated name'
                    }
            
      get:
        tags:
        - train
        summary: List all trains metadata
        description: Returns an array of trains metadata, where each train contains a metadata file.

        responses:
          '200':
            description: An array of train metadata in result field
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                    result:
                      type: array
                      items:
                        type: object
                        properties:
                         finished:
                           type: boolean
                           description: 'A flag with request processing status'
                         method:
                           type: string
                           description: 'The used method from class object'
                         name:
                           type: string
                           description: 'The identification name of this instance'
                         parentName:
                           type: string
                           description: "The name from parent instance"
                         timeCreated:
                           type: string
                           description: "A string whit formated time"
                         type:
                           type: string
                           description: 'the entity which dataset belongs'
                example:
                   {
                    'result': [
                                {
                                  "finished": false,
                                  "method": "fit",
                                  "name": "fitGradientBoost10",
                                  "parentName": "gradientBoost2",
                                  "timeCreated": "2021-01-10T10:20:27-00:00",
                                  "type": "train"
                                },
                                {
                                  "finished": false,
                                  "method": "path",
                                  "name": "linearModel2",
                                  "parentName": "linearModel",
                                  "timeCreated": "2021-01-13T13:36:03-00:00",
                                  "type": "train"
                                }
                        ]
                    }
                  
    /api/learningOrchestra/v1/train/scikitLearn/{name}:
      patch:
        tags:
           - train
        summary: update a train instance
        description:  Update the execution with new parameters in method call
        parameters:
          - name: name
            in: path
            required: true
            description: the id of train.
            schema:
              type : string
        responses:
          '201':
            description: Return the location link from created instance 
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The location from created instance'
                example: 
                  {
                  'result': '/api/learningOrchestra/v1/train?MultiTaskLasso?query={}&limit=10&skip=0'
                  }
                  
          '406':
            description: There are conflicts with request data
            content:
              application/json:
                schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                examples:
                  nonexistent filename:
                    value:
                      {
                        'result': 'duplicated name'
                      }
                  invalid class method parameter:
                    value:
                      {
                        'result': "invalid class method parameter"
                      }
                    
      get:
        tags:
           - train
        summary: List the train metadata executions
        description:  Returns rows of the requested train, with pagination, the first row in the query is always the metadata file from train instance,
          other lines are the PATCH request metadata from updated train instances
        parameters:
          - name: name
            in: path
            required: true
            description: the name id of train.
            schema:
              type : string
          - name: skip
            in: query
            required: true
            description: the amount of rows to skip in pagination.
            schema:
              type : number
          - name: limit
            in: query
            required: true
            description: the amount of rows to limit after skipped rows in pagination, maximum limit to 20 rows.
            schema:
              type : number
          - name: query
            in: query
            required: true
            description: Query to find documents, if only pagination is requested, query should be empty curly brackets query={}.
            schema:
              type : string

        responses:
          '200':
            description: The paginated documents of a train
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: array
                       items: 
                         type: object
                       description: 'The metadata executions from requested train'
                  example:
                    {
                      "result": [
                                  {
                                    "_id": 0,
                                    "finished": true,
                                    "method": "fit",
                                    "name": "MultiTaskLasso3",
                                    "parentName": "MultiTaskLasso",
                                    "timeCreated": "2021-01-13T18:36:42-00:00",
                                    "type": "train"
                                  },
                                  {
                                    "_id": 1,
                                    "description": "some description",
                                    "exception": null,
                                    "methodParameters": {
                                                        "X": [[0,1],[1,2],[2,4]],
                                                        "y": [[0,0],[1,1],[2,3]]
                                                        }
                                   }
                                ]
                    }
                        
      delete:
        tags:
           - train
        summary: Delete a train instance
        description:  Delete an existent train instance.
        parameters:
          - name: name
            in: path
            required: true
            description: the id of train.
            schema:
              type : string
        responses:
          '200':
            description: Return the success message from deletion request
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The message from delete status'
                example: 
                  {'result': 'deleted file'}

    /api/learningOrchestra/v1/tune/scikitLearn:
      post:
        tags:
         - tune
        summary: toDO
        description: toDO
        requestBody:
          required: True
          content:
            application/json:
             schema: 
                  type: object
                  properties:
                    parentName:
                      type: string
                      description: The name id of object to use
                    name:
                      type: string
                      description: The name id to identify the instance
                    description:
                      type: string
                      description: Some description of instance
                    method:
                      type: string
                      description: The method to use from class object
                    methodParameters:
                      type: object
                      description: An object with key:value parameters names and values
                    
             example:
                {
                  "parentName": "MultiTaskLasso",
                  "name": "MultiTaskLasso",
                  "description": "some description",
                  "method": "fit",
                  "methodParameters": {
                              "X": [[0, 1], [1, 2], [2, 4]],
                              "y": [[0, 0], [1, 1], [2, 3]]
                  }
                }
        responses:
          '201':
            description: Return the location link from created resource 
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The location from created resource'
                example: 
                  {
                  'result': '/api/learningOrchestra/v1/tune?MultiTaskLasso?query={}&limit=10&skip=0'
                  }
                  
          '406':
            description: There are conflicts with request data
            content:
              application/json:
                schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                examples:
                  invalid parent name:
                    value:
                      {
                        'result': "parentName doesn't exist"
                      }
                  invalid class method name:
                    value:
                      {
                        'result': 'invalid class method parameter'
                      }
                  invalid method name:
                    value:
                      {
                        'result': 'invalid method name'
                      }
                  invalid module path name:
                    value:
                      {
                        'result': 'invalid module path name'
                      }
          '409':
              description: The name already exists
              content:
                application/json:
                  schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                  example: 
                    {
                    'result': 'duplicated name'
                    }
            
      get:
        tags:
        - tune
        summary: List all tunes metadata
        description: Returns an array of tunes metadata, where each train contains a metadata file.

        responses:
          '200':
            description: An array of train metadata in result field
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                    result:
                      type: array
                      items:
                        type: object
                        properties:
                         finished:
                           type: boolean
                           description: 'A flag with request processing status'
                         method:
                           type: string
                           description: 'The used method from class object'
                         name:
                           type: string
                           description: 'The identification name of this instance'
                         parentName:
                           type: string
                           description: "The name from parent instance"
                         timeCreated:
                           type: string
                           description: "A string whit formated time"
                         type:
                           type: string
                           description: 'the entity which dataset belongs'
                example:
                   {
                    'result': [
                                {
                                  "finished": false,
                                  "method": "fit",
                                  "name": "fitGradientBoost10",
                                  "parentName": "gradientBoost2",
                                  "timeCreated": "2021-01-10T10:20:27-00:00",
                                  "type": "train"
                                },
                                {
                                  "finished": false,
                                  "method": "path",
                                  "name": "linearModel2",
                                  "parentName": "linearModel",
                                  "timeCreated": "2021-01-13T13:36:03-00:00",
                                  "type": "train"
                                }
                        ]
                    }
                  
    /api/learningOrchestra/v1/tune/scikitLearn/{name}:
      patch:
        tags:
           - tune
        summary: update a tune instance
        description:  Update the execution with new parameters in method call
        parameters:
          - name: name
            in: path
            required: true
            description: the id of instance.
            schema:
              type : string
        responses:
          '201':
            description: Return the location link from created instance 
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The location from created instance'
                example: 
                  {
                  'result': '/api/learningOrchestra/v1/tune?MultiTaskLasso?query={}&limit=10&skip=0'
                  }
                  
          '406':
            description: There are conflicts with request data
            content:
              application/json:
                schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                examples:
                  nonexistent filename:
                    value:
                      {
                        'result': 'duplicated name'
                      }
                  invalid class method parameter:
                    value:
                      {
                        'result': "invalid class method parameter"
                      }
                    
      get:
        tags:
           - tune
        summary: List the tune metadata executions
        description:  Returns rows of the requested train, with pagination, the first row in the query is always the metadata file from train instance,
          other lines are the PATCH request metadata from updated train instances
        parameters:
          - name: name
            in: path
            required: true
            description: the name id of instance.
            schema:
              type : string
          - name: skip
            in: query
            required: true
            description: the amount of rows to skip in pagination.
            schema:
              type : number
          - name: limit
            in: query
            required: true
            description: the amount of rows to limit after skipped rows in pagination, maximum limit to 20 rows.
            schema:
              type : number
          - name: query
            in: query
            required: true
            description: Query to find documents, if only pagination is requested, query should be empty curly brackets query={}.
            schema:
              type : string

        responses:
          '200':
            description: The paginated documents of a instance
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: array
                       items: 
                         type: object
                       description: 'The metadata executions from requested instance'
                  example:
                    {
                      "result": [
                                  {
                                    "_id": 0,
                                    "finished": true,
                                    "method": "fit",
                                    "name": "MultiTaskLasso3",
                                    "parentName": "MultiTaskLasso",
                                    "timeCreated": "2021-01-13T18:36:42-00:00",
                                    "type": "train"
                                  },
                                  {
                                    "_id": 1,
                                    "description": "some description",
                                    "exception": null,
                                    "methodParameters": {
                                                        "X": [[0,1],[1,2],[2,4]],
                                                        "y": [[0,0],[1,1],[2,3]]
                                                        }
                                   }
                                ]
                    }
                        
      delete:
        tags:
           - tune
        summary: Delete a tune instance
        description:  Delete an existent tune instance.
        parameters:
          - name: name
            in: path
            required: true
            description: the id of instance.
            schema:
              type : string
        responses:
          '200':
            description: Return the success message from deletion request
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The message from delete status'
                example: 
                  {'result': 'deleted file'}

    /api/learningOrchestra/v1/predict/scikitLearn:
      post:
        tags:
         - predict
        summary: toDO
        description: toDO
        requestBody:
          required: True
          content:
            application/json:
             schema: 
                  type: object
                  properties:
                    parentName:
                      type: string
                      description: The name id of object to use
                    name:
                      type: string
                      description: The name id to identify the instance
                    description:
                      type: string
                      description: Some description of instance
                    method:
                      type: string
                      description: The method to use from class object
                    methodParameters:
                      type: object
                      description: An object with key:value parameters names and values
                    
             example:
                {
                  "parentName": "MultiTaskLasso",
                  "name": "MultiTaskLasso",
                  "description": "some description",
                  "method": "fit",
                  "methodParameters": {
                              "X": [[0, 1], [1, 2], [2, 4]],
                              "y": [[0, 0], [1, 1], [2, 3]]
                  }
                }
        responses:
          '201':
            description: Return the location link from created resource 
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The location from created resource'
                example: 
                  {
                  'result': '/api/learningOrchestra/v1/tune?MultiTaskLasso?query={}&limit=10&skip=0'
                  }
                  
          '406':
            description: There are conflicts with request data
            content:
              application/json:
                schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                examples:
                  invalid parent name:
                    value:
                      {
                        'result': "parentName doesn't exist"
                      }
                  invalid class method name:
                    value:
                      {
                        'result': 'invalid class method parameter'
                      }
                  invalid method name:
                    value:
                      {
                        'result': 'invalid method name'
                      }
                  invalid module path name:
                    value:
                      {
                        'result': 'invalid module path name'
                      }
          '409':
              description: The name already exists
              content:
                application/json:
                  schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                  example: 
                    {
                    'result': 'duplicated name'
                    }
            
      get:
        tags:
        - predict
        summary: List all predicts metadata
        description: Returns an array of predicts metadata, where each train contains a metadata file.

        responses:
          '200':
            description: An array of predicts metadata in result field
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                    result:
                      type: array
                      items:
                        type: object
                        properties:
                         finished:
                           type: boolean
                           description: 'A flag with request processing status'
                         method:
                           type: string
                           description: 'The used method from class object'
                         name:
                           type: string
                           description: 'The identification name of this instance'
                         parentName:
                           type: string
                           description: "The name from parent instance"
                         timeCreated:
                           type: string
                           description: "A string whit formated time"
                         type:
                           type: string
                           description: 'the entity which dataset belongs'
                example:
                   {
                    'result': [
                                {
                                  "finished": false,
                                  "method": "fit",
                                  "name": "fitGradientBoost10",
                                  "parentName": "gradientBoost2",
                                  "timeCreated": "2021-01-10T10:20:27-00:00",
                                  "type": "train"
                                },
                                {
                                  "finished": false,
                                  "method": "path",
                                  "name": "linearModel2",
                                  "parentName": "linearModel",
                                  "timeCreated": "2021-01-13T13:36:03-00:00",
                                  "type": "train"
                                }
                        ]
                    }
                  
    /api/learningOrchestra/v1/predict/scikitLearn/{name}:
      patch:
        tags:
           - predict
        summary: update a predict instance
        description:  Update the execution with new parameters in method call
        parameters:
          - name: name
            in: path
            required: true
            description: the id of instance.
            schema:
              type : string
        responses:
          '201':
            description: Return the location link from created instance 
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The location from created instance'
                example: 
                  {
                  'result': '/api/learningOrchestra/v1/tune?MultiTaskLasso?query={}&limit=10&skip=0'
                  }
                  
          '406':
            description: There are conflicts with request data
            content:
              application/json:
                schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                examples:
                  nonexistent filename:
                    value:
                      {
                        'result': 'duplicated name'
                      }
                  invalid class method parameter:
                    value:
                      {
                        'result': "invalid class method parameter"
                      }
                    
      get:
        tags:
           - predict
        summary: List the predict metadata executions
        description:  Returns rows of the requested train, with pagination, the first row in the query is always the metadata file from train instance,
          other lines are the PATCH request metadata from updated train instances
        parameters:
          - name: name
            in: path
            required: true
            description: the name id of instance.
            schema:
              type : string
          - name: skip
            in: query
            required: true
            description: the amount of rows to skip in pagination.
            schema:
              type : number
          - name: limit
            in: query
            required: true
            description: the amount of rows to limit after skipped rows in pagination, maximum limit to 20 rows.
            schema:
              type : number
          - name: query
            in: query
            required: true
            description: Query to find documents, if only pagination is requested, query should be empty curly brackets query={}.
            schema:
              type : string

        responses:
          '200':
            description: The paginated documents of a instance
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: array
                       items: 
                         type: object
                       description: 'The metadata executions from requested instance'
                  example:
                    {
                      "result": [
                                  {
                                    "_id": 0,
                                    "finished": true,
                                    "method": "fit",
                                    "name": "MultiTaskLasso3",
                                    "parentName": "MultiTaskLasso",
                                    "timeCreated": "2021-01-13T18:36:42-00:00",
                                    "type": "train"
                                  },
                                  {
                                    "_id": 1,
                                    "description": "some description",
                                    "exception": null,
                                    "methodParameters": {
                                                        "X": [[0,1],[1,2],[2,4]],
                                                        "y": [[0,0],[1,1],[2,3]]
                                                        }
                                   }
                                ]
                    }
                        
      delete:
        tags:
           - predict
        summary: Delete a predict instance
        description:  Delete an existent tune instance.
        parameters:
          - name: name
            in: path
            required: true
            description: the id of instance.
            schema:
              type : string
        responses:
          '200':
            description: Return the success message from deletion request
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The message from delete status'
                example: 
                  {'result': 'deleted file'}


    /api/learningOrchestra/v1/evaluate/scikitLearn:
      post:
        tags:
         - evaluate
        summary: toDO
        description: toDO
        requestBody:
          required: True
          content:
            application/json:
             schema: 
                  type: object
                  properties:
                    parentName:
                      type: string
                      description: The name id of object to use
                    name:
                      type: string
                      description: The name id to identify the instance
                    description:
                      type: string
                      description: Some description of instance
                    method:
                      type: string
                      description: The method to use from class object
                    methodParameters:
                      type: object
                      description: An object with key:value parameters names and values
                    
             example:
                {
                  "parentName": "MultiTaskLasso",
                  "name": "MultiTaskLasso",
                  "description": "some description",
                  "method": "fit",
                  "methodParameters": {
                              "X": [[0, 1], [1, 2], [2, 4]],
                              "y": [[0, 0], [1, 1], [2, 3]]
                  }
                }
        responses:
          '201':
            description: Return the location link from created resource 
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The location from created resource'
                example: 
                  {
                  'result': '/api/learningOrchestra/v1/tune?MultiTaskLasso?query={}&limit=10&skip=0'
                  }
                  
          '406':
            description: There are conflicts with request data
            content:
              application/json:
                schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                examples:
                  invalid parent name:
                    value:
                      {
                        'result': "parentName doesn't exist"
                      }
                  invalid class method name:
                    value:
                      {
                        'result': 'invalid class method parameter'
                      }
                  invalid method name:
                    value:
                      {
                        'result': 'invalid method name'
                      }
                  invalid module path name:
                    value:
                      {
                        'result': 'invalid module path name'
                      }
          '409':
              description: The name already exists
              content:
                application/json:
                  schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                  example: 
                    {
                    'result': 'duplicated name'
                    }
            
      get:
        tags:
        - evaluate
        summary: List all evaluates metadata
        description: Returns an array of evaluates metadata, where each train contains a metadata file.

        responses:
          '200':
            description: An array of train metadata in result field
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                    result:
                      type: array
                      items:
                        type: object
                        properties:
                         finished:
                           type: boolean
                           description: 'A flag with request processing status'
                         method:
                           type: string
                           description: 'The used method from class object'
                         name:
                           type: string
                           description: 'The identification name of this instance'
                         parentName:
                           type: string
                           description: "The name from parent instance"
                         timeCreated:
                           type: string
                           description: "A string whit formated time"
                         type:
                           type: string
                           description: 'the entity which dataset belongs'
                example:
                   {
                    'result': [
                                {
                                  "finished": false,
                                  "method": "fit",
                                  "name": "fitGradientBoost10",
                                  "parentName": "gradientBoost2",
                                  "timeCreated": "2021-01-10T10:20:27-00:00",
                                  "type": "train"
                                },
                                {
                                  "finished": false,
                                  "method": "path",
                                  "name": "linearModel2",
                                  "parentName": "linearModel",
                                  "timeCreated": "2021-01-13T13:36:03-00:00",
                                  "type": "train"
                                }
                        ]
                    }
                  
    /api/learningOrchestra/v1/evaluate/scikitLearn/{name}:
      patch:
        tags:
           - evaluate
        summary: update a evaluate instance
        description:  Update the execution with new parameters in method call
        parameters:
          - name: name
            in: path
            required: true
            description: the id of instance.
            schema:
              type : string
        responses:
          '201':
            description: Return the location link from created instance 
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The location from created instance'
                example: 
                  {
                  'result': '/api/learningOrchestra/v1/tune?MultiTaskLasso?query={}&limit=10&skip=0'
                  }
                  
          '406':
            description: There are conflicts with request data
            content:
              application/json:
                schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                examples:
                  nonexistent filename:
                    value:
                      {
                        'result': 'duplicated name'
                      }
                  invalid class method parameter:
                    value:
                      {
                        'result': "invalid class method parameter"
                      }
                    
      get:
        tags:
           - evaluate
        summary: List the evaluate metadata executions
        description:  Returns rows of the requested train, with pagination, the first row in the query is always the metadata file from train instance,
          other lines are the PATCH request metadata from updated train instances
        parameters:
          - name: name
            in: path
            required: true
            description: the name id of instance.
            schema:
              type : string
          - name: skip
            in: query
            required: true
            description: the amount of rows to skip in pagination.
            schema:
              type : number
          - name: limit
            in: query
            required: true
            description: the amount of rows to limit after skipped rows in pagination, maximum limit to 20 rows.
            schema:
              type : number
          - name: query
            in: query
            required: true
            description: Query to find documents, if only pagination is requested, query should be empty curly brackets query={}.
            schema:
              type : string

        responses:
          '200':
            description: The paginated documents of a instance
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: array
                       items: 
                         type: object
                       description: 'The metadata executions from requested instance'
                  example:
                    {
                      "result": [
                                  {
                                    "_id": 0,
                                    "finished": true,
                                    "method": "fit",
                                    "name": "MultiTaskLasso3",
                                    "parentName": "MultiTaskLasso",
                                    "timeCreated": "2021-01-13T18:36:42-00:00",
                                    "type": "train"
                                  },
                                  {
                                    "_id": 1,
                                    "description": "some description",
                                    "exception": null,
                                    "methodParameters": {
                                                        "X": [[0,1],[1,2],[2,4]],
                                                        "y": [[0,0],[1,1],[2,3]]
                                                        }
                                   }
                                ]
                    }
                        
      delete:
        tags:
           - evaluate
        summary: Delete a evaluate instance
        description:  Delete an existent evaluate instance.
        parameters:
          - name: name
            in: path
            required: true
            description: the id of instance.
            schema:
              type : string
        responses:
          '200':
            description: Return the success message from deletion request
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The message from delete status'
                example: 
                  {'result': 'deleted file'}

                  

                  
  tags:
    - name: dataset
      description: The dataset resource is used to manages datasets, datasets are downloaded in CSV format and parsed into JSON format where the primary key for each document is the datasetName field contained in the JSON file.
    - name: projection
      description: The projection resource makes a projection from dataset inserted in dataset resource, generating a new dataset, and also manages this generated dataset.
    - name: dataType
      description: The dataType resource changes the fields data type from stored resources between number and string.
    - name: histogram
      description: The histogram resource makes a histogram from a stored file, storing the resulting histogram in a new dataset.
    - name: transform
      description: Make transformations from learningOrchestra instances, like dataset and projection, using the python libs features
    - name: explore
      description: Make a image plot from an instance, using the python libs features.
    - name: builder
      description: The builder resource joins several steps of machine learning workflow (transform, tune, train and evaluate) acoupling in a unique resouce, builder creates several model predictions using your own modeling code using a defined set of classifiers.
    - name: model
      description: The model resource creates models instances from most popular python libraries like scikit-learn and TensorFlow.
    - name: train
      description: Train a model instance with methods availabes from model object
    - name: tune
      description: Tune an instance \toDO
    - name: predict
      description: predict an instance \toDO
    - name: evaluate
      description: evaluate an instance \toDO

      
  components:
    schemas:
      datasetMetadata:
        type: object
        properties:
          result:
            type: array
            items:
              type: object
              properties:
               fields:
                 type: array
                 items:
                   type: string
                 description: 'The dataset fields'
               datasetName:
                 type: string
                 description: 'The identification name of dataset'
               finished:
                 type: boolean
                 description: 'A flag with request processing status'
               type:
                 type: string
                 description: 'the entity which dataset belongs'
               timeCreated:
                 type: string
                 description: "A string whit formated time"
               url:
                 type: string
                 description: "The URL used to download this dataset"





      
    
contentType: yaml
