_id: spc_d13bad8869294d4cbb6c6a1cb6405bb0
type: ApiSpec
parentId: wrk_735b5f2b993d4dfeab05f0615da33e83
modified: 1609689913047
created: 1608230138068
fileName: learningOrchestra
contents: >+
  openapi: 3.0.0

  info:
    title: Learning Orchestra
    description: LearningOrchestra aims to facilitate the development of complex data mining workflows by seamlessly interfacing different data science tools and services. From a single interoperable Application Programming Interface (API), users can design their analytical pipelines and deploy them in an environment with the appropriate capabilities.
    version: v1.0
    contact:
      url: https://github.com/learningOrchestra/learningOrchestra
    license: 
      name: "GPL-3.0"
      url: "https://www.gnu.org/licenses/gpl-3.0.en.html"

  servers:
    - url: 'http://ip/api/learningOrchestra/v1'



   
  paths:
    /dataset:
      post:
        tags:
         - dataset
        summary: Download a dataset from an URL
        description: Insert a CSV into the database using a public URI with direct file download.
        requestBody:
          required: True
          content:
            application/json:
             schema: 
                  type: object
                  properties:
                    datasetName:
                      type: string
                    datasetURI:
                      type: string
             example:
               {
                 "datasetName": "titanic",
                 "datasetURI": "www.somesite.com/path/to/dataset"
               }
        responses:
          '201':
            description: Return the location link from created dataset 
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The location from created dataset'
                example: 
                  {
                  'result': '/api/learningOrchestra/v1/dataset?titanicTrain?query={}&limit=10&skip=0'
                  }
          '406':
            description: The datasetURI is invalid
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'Error log'
                example: 
                  {
                  'result': 'invalid url'
                  }
          '409':
              description: The datasetName already exists
              content:
                application/json:
                  schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                  example: 
                    {
                    'result': 'duplicate file'
                    }
            
      get:
        tags:
        - dataset
        summary: List all datasets metadata
        description: Returns an array of datasets metadata, where each dataset contains a metadata file.

        responses:
          '200':
            description: An array of datasets metadata in result field
            content:
              application/json:
                schema: 
                    $ref: '#/components/schemas/datasetMetadata'
                example:
                   {
                    'result': [
                         {
                            "fields": [
                                "PassengerId",
                                "Survived",
                                "Pclass",
                                "Name",
                                "Sex",
                                "Age",
                                "SibSp",
                                "Parch",
                                "Ticket",
                                "Fare",
                                "Cabin",
                                "Embarked"
                            ],
                            "datasetName": "titanicTraining",
                            "finished": true,
                            "type": "dataset",
                            "timeCreated": "2020-07-28T22:16:10-00:00",
                            "url": "https://filebin.net/rpfdy8clm5984a4c/titanic_training.csv?t=gcnjz1yo"
                        }
                      ]
                    }
                  
    /dataset/{datasetName}:
      get:
        tags:
           - dataset
        summary: List the dataset content
        description:  Returns rows of the dataset requested, with pagination, the first row in the query is always the metadata file.
        parameters:
          - name: datasetName
            in: path
            required: true
            description: the id of dataset.
            schema:
              type : string
          - name: skip
            in: query
            required: true
            description: the amount of rows to skip in pagination.
            schema:
              type : number
          - name: limit
            in: query
            required: true
            description: the amount of rows to limit after skipped rows in pagination, maximum limit to 20 rows.
            schema:
              type : number
          - name: query
            in: query
            required: true
            description: Query to find documents, if only pagination is requested, query should be empty curly brackets query={}.
            schema:
              type : string

        responses:
          '200':
            description: The paginated rows of a dataset
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: array
                       items: 
                         type: object
                       description: 'The rows from requested dataset'
                  example:
                    {
                      "result": [
                        {
                          "Age": "35",
                          "Cabin": "",
                          "Embarked": "S",
                          "Fare": "8.05",
                          "Name": "Allen, Mr. William Henry",
                          "Parch": "0",
                          "PassengerId": "5",
                          "Pclass": "3",
                          "Sex": "male",
                          "SibSp": "0",
                          "Survived": "0",
                          "Ticket": "373450",
                          "_id": 5
                        }
                      ]
                    }
        
      delete:
        tags:
           - dataset
        summary: Delete a inserted dataset
        description:  Delete an existent dataset in the database.
        parameters:
          - name: datasetName
            in: path
            required: true
            description: the id of dataset.
            schema:
              type : string
        responses:
          '200':
            description: Return the success message from deletion request
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The message from delete status'
                example: 
                  {'result': 'deleted file'}
                  
    /tranform/projection:
        post:
          tags:
           - projection
          summary: Create a projection dataset from an inserted dataset
          description: The projection resource makes a projection from some dataset inserted in dataset resource, generating a new dataset.
          requestBody:
            required: True
            content:
              application/json:
               schema: 
                    type: object
                    properties:
                      inputDatasetName:
                        type: string
                      outputDatasetName:
                        type: string
                      names:
                        type: array
                        items:
                          type: string
               example:
                  {
                      "inputDatasetName": "name of dataset to use",
                      "outputDatasetName": "name of projection dataset",
                      "names" : ["list", "of", "fields"]
                  }
          responses:
            '201':
              description: Return the location link from created dataset 
              content:
                application/json:
                  schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'The location from created dataset'
                  example: 
                    {
                    'result': '/api/learningOrchestra/v1/transform/projection?titanicTrainProj?query={}&limit=10&skip=0'
                    }
            '409':
                description: The outputDatasetName already exists
                content:
                  application/json:
                    schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'Error log'
                    example: 
                      {
                      'result': 'duplicated projection name'
                      }
            '406':
              description: There are conflicts with request data
              content:
                application/json:
                  schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'Error log'
                  examples:
                    duplicated projection name:
                      value:
                        {
                          'result': 'duplicated projection name'
                        }
                    missing fields:
                        value:
                          {
                            'result': 'missing fields'
                          }
                    invalid dataset name:
                      value:
                        {
                          'result': 'invalid dataset name'
                        }
                    unfinished dataset:
                      value:
                        {
                          'result': 'unfinished processing in input dataset'
                        }
                    
        get:
            tags:
            - projection
            summary: List all projections metadata
            description: Returns an array of projections metadata, where each dataset contains a metadata file.

            responses:
              '200':
                description: An array of datasets metadata in result field
                content:
                  application/json:
                    schema: 
                        $ref: '#/components/schemas/datasetMetadata'
                    example:
                       {
                        'result': [
                             {
                                "fields": [
                                    "PassengerId",
                                    "Survived",
                                    "Pclass",
                                    "Name",
                                    "Cabin",
                                    "Embarked"
                                ],
                                "parentDatasetName": "titanicTraining",
                                "datasetName": "titanicTrainingProjection",
                                "finished": true,
                                "type": "projection",
                                "timeCreated": "2020-07-28T22:16:10-00:00",
                                "url": "https://filebin.net/rpfdy8clm5984a4c/titanic_training.csv?t=gcnjz1yo"
                            }
                          ]
                        }  
    /tranform/projection/{projectionName}:
      get:
        tags:
           - projection
        summary: List the projection content
        description:  Returns rows of the projection requested, with pagination, the first row in the query is always the metadata file.
        parameters:
          - name: projectionName
            in: path
            required: true
            description: the id of projection.
            schema:
              type : string
          - name: skip
            in: query
            required: true
            description: the amount of rows to skip in pagination.
            schema:
              type : number
          - name: limit
            in: query
            required: true
            description: the amount of rows to limit after skipped rows in pagination, maximum limit to 20 rows.
            schema:
              type : number
          - name: query
            in: query
            required: true
            description: Query to find documents, if only pagination is requested, query should be empty curly brackets query={}.
            schema:
              type : string

        responses:
          '200':
            description: The paginated rows of a dataset
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: array
                       items: 
                         type: object
                       description: 'The rows from requested dataset'
                  example:
                    {
                      "result": [
                        {
                          "Pclass": "3",
                          "Sex": "male",
                          "SibSp": "0",
                          "Survived": "0",
                          "Ticket": "373450",
                          "_id": 5
                        }
                      ]
                    }
        
      delete:
        tags:
           - projection
        summary: Delete a created projection
        description:  Delete an existent projection in the database.
        parameters:
          - name: projectionName
            in: path
            required: true
            description: the id of projection.
            schema:
              type : string
        responses:
          '200':
            description: Return the success message from deletion request
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The message from delete status'
                example: 
                  {'result': 'deleted file'}

    /tranform/dataType:
        patch:
          tags:
           - dataType
          summary: Change the type of fields from a resource
          description: The request uses `inputDatasetName` as the dataset name to change the types of your fields. 
            The body request field *types* is a list of `Key:Value` which uses a *number* or *string* descriptor values in each field keys to describe the new value of altered field in resource.
          requestBody:
            required: True
            content:
              application/json:
               schema: 
                    type: object
                    properties:
                      inputDatasetName:
                        type: string
                      types:
                        type: object
               example:
                  {
                     "inputDatasetName": "titanicTrain",
                      "types": {
                          "Age": "number",
                          "Pclass": "string"
                      }
                  }
          responses:
            '200':
              description: Return the location link from altered dataset 
              content:
                application/json:
                  schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'The location from altered dataset'
                  example: 
                    {
                    'result': '/api/learningOrchestra/v1/dataset?titanicTrain?query={}&limit=10&skip=0'
                    }
            '406':
              description: There are wrong information in request data
              content:
                application/json:
                  schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'Error log'
                  examples:
                    invalid fields:
                      value:
                        {
                          'result': 'invalid fields'
                        }
                    missing fields:
                        value:
                          {
                            'result': 'missing fields'
                          }
                    invalid dataset name:
                      value:
                        {
                          'result': 'invalid dataset name'
                        }
                    unfinished dataset:
                      value:
                        {
                          'result': 'unfinished processing in input dataset'
                        }

    /explore/histogram:
          post:
            tags:
             - histogram
            summary: Create a histogram from a resource
            description: The request is sent in the body, `inputDatasetName` is the name from used dataset and the `outputDatasetName` is the name of the file in which the histogram result is saved. 
              The `names` is an array with all the fields necessary to make the histogram.
            requestBody:
              required: True
              content:
                application/json:
                 schema: 
                      type: object
                      properties:
                        inputDatasetName:
                          type: string
                        outputDatasetName:
                          type: string
                        names:
                          type: array
                          items:
                            type: string
                 example:
                    {
                        "inputDatasetName": "name of dataset to use",
                        "outputDatasetName": "name to histogram dataset",
                        "names" : ["list", "of", "fields"]
                    }
            responses:
              '201':
                description: Return the location link from created histogram 
                content:
                  application/json:
                    schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'The location from created histogram'
                    example: 
                      {
                      'result': '/api/learningOrchestra/v1/explore/histogram?titanicTrainHistogram?query={}&limit=10&skip=0'
                      }
              '409':
                  description: The outputDatasetName already exists
                  content:
                    application/json:
                      schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'Error log'
                      example: 
                        {
                        'result': 'duplicated projection name'
                        }
              '406':
                description: There are conflicts with request data
                content:
                  application/json:
                    schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'Error log'
                    examples:
                      invalid fields:
                        value:
                          {
                            'result': 'invalid fields'
                          }
                      missing fields:
                        value:
                          {
                            'result': 'missing fields'
                          }
                      invalid dataset name:
                        value:
                          {
                            'result': 'invalid dataset name'
                          }
                      unfinished dataset:
                        value:
                          {
                            'result': 'unfinished processing in input dataset'
                          }

          get:
              tags:
              - histogram
              summary: List all histogram datasets metadata
              description: Returns an array of histogram datasets metadata, where each dataset contains a metadata file.
              responses:
                '200':
                  description: An array of datasets metadata in result field
                  content:
                    application/json:
                      schema: 
                          $ref: '#/components/schemas/datasetMetadata'
                      example:
                         {
                          'result': [
                               {
                                  "fields": [
                                      "PassengerId",
                                      "Survived",
                                      "Pclass",
                                      "Name",
                                      "Cabin",
                                      "Embarked"
                                  ],
                                  "parentDatasetName": "titanicTraining",
                                  "datasetName": "titanicTrainingProjection",
                                  "finished": true,
                                  "type": "histogram",
                                  "timeCreated": "2020-07-28T22:16:10-00:00",
                                  "url": "https://filebin.net/rpfdy8clm5984a4c/titanic_training.csv?t=gcnjz1yo"
                              }
                            ]
                          }  
    /explore/histogram/{histogramName}:
      get:
        tags:
           - histogram
        summary: Returns rows of the histogram requested, with pagination.
        description:  Returns an array of histogram datasets rows, The first row in the query is always the metadata file.

        parameters:
          - name: histogramName
            in: path
            required: true
            description: the id of histogram.
            schema:
              type : string
          - name: skip
            in: query
            required: true
            description: the amount of rows to skip in pagination.
            schema:
              type : number
          - name: limit
            in: query
            required: true
            description: the amount of rows to limit after skipped rows in pagination, maximum limit to 20 rows.
            schema:
              type : number
          - name: query
            in: query
            required: true
            description: Query to find documents, if only pagination is requested, query should be empty curly brackets query={}.
            schema:
              type : string

        responses:
          '200':
            description: The paginated rows of a histogram
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: array
                       items:
                         type: object
                       description: 'The rows from requested histogram'
                  example:
                    {
                      "result": [
                      {
                          "Sex": "male",
                          "SibSp": "0",
                          "Survived": "0",
                          "Ticket": "373450",
                          "_id": 5
                        }
                      ]
                    }

      delete:
        tags:
           - histogram
        summary: Delete a created histogram
        description:  Delete an existent histogram in the database.
        parameters:
          - name: histogramName
            in: path
            required: true
            description: the id of histogram.
            schema:
              type : string
        responses:
          '200':
            description: Return the success message from deletion request
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The message from delete status'
                example: 
                  {'result': 'deleted file'}

    /explore/tsne:
          post:
            tags:
             - t-SNE
            summary: Create an image plot.
            description: Create a t-SNE plot from a resource.
            requestBody:
              required: True
              content:
                application/json:
                 schema: 
                      type: object
                      properties:
                        inputDatasetName:
                          type: string
                        outputPlotName:
                          type: string
                        label:
                          type: string
                 examples:
                   plot with label field:
                     value:
                      {
                          "inputDatasetName": "titanicTrain",
                          "outputPlotName": "titainicTrainPlot",
                          "label" : "Survived"
                      }
                   plot without label field:
                     value:
                      {
                          "inputDatasetName": "titanicTest",
                          "outputPlotName": "titanicTestPlot",
                          "label" : null
                      }
            responses:
              '201':
                description: Return the location link from created image plot 
                content:
                  application/json:
                    schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'The location from created histogram'
                    example: 
                      {
                      'result': '/api/learningOrchestra/v1/explore/histogram?titanicTrainHistogram?query={}&limit=10&skip=0'
                      }
              '409':
                  description: The outputPlotName already exists
                  content:
                    application/json:
                      schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'Error log'
                      example: 
                        {
                        'result': 'duplicated plot name'
                        }
              '406':
                description: There are conflicts with request data
                content:
                  application/json:
                    schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'Error log'
                    examples:
                      invalid field:
                        value:
                          {
                            'result': 'invalid field'
                          }
                      invalid dataset name:
                        value:
                          {
                            'result': 'invalid dataset name'
                          }
                      unfinished dataset:
                        value:
                          {
                            'result': 'unfinished processing in input dataset'
                          }

          get:
              tags:
              - t-SNE
              summary: Read the names of the created plots
              description: Returns a list with all created images plot names.
              responses:
                '200':
                  description: An array of datasets metadata in result field
                  content:
                    application/json:
                      schema: 
                          type: object
                          properties:
                            result:
                              type: array
                              items:
                                type: string
                      example:
                         {
                          'result': [
                               "imagePlotOne",
                               "imagePlotTwo"
                               ]
                          }  
    /explore/tsne/{plotName}:
      get:
        tags:
           - t-SNE
        summary: Read an image plot
        description: Returns the image plot of the specified plotName.

        parameters:
          - name: plotName
            in: path
            required: true
            description: the id of plot.
            schema:
              type : string

        responses:
          '200':
            description: Return the image plot
            content:
              image/png:
                 schema:
                  type: string
                  format: binary
            
          '404':
            description: Plot name does not found
            content:
              application/json:
                schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                example:
                  {
                    'result': "plot name doesn't found"
                  }
   

      delete:
        tags:
           - t-SNE
        summary: Delete a created image plot
        description:  Delete an existent image plot in the database.
        parameters:
          - name: plotName
            in: path
            required: true
            description: the id of image plot.
            schema:
              type : string
        responses:
          '200':
            description: Return the success message from deletion request
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The message from delete status'
                example: 
                  {'result': 'deleted file'}
          '404':
            description: Plot name does not found
            content:
              application/json:
                schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                example:
                  {
                    'result': "plot name doesn't found"
                  }
                  
                 
             
    /explore/pca:
          post:
            tags:
             - PCA
            summary: Create an image plot.
            description: Create a PCA plot from a resource.
            requestBody:
              required: True
              content:
                application/json:
                 schema: 
                      type: object
                      properties:
                        inputDatasetName:
                          type: string
                        outputPlotName:
                          type: string
                        label:
                          type: string
                 examples:
                   plot with label field:
                     value:
                      {
                          "inputDatasetName": "titanicTrain",
                          "outputPlotName": "titainicTrainPlot",
                          "label" : "Survived"
                      }
                   plot without label field:
                     value:
                      {
                          "inputDatasetName": "titanicTest",
                          "outputPlotName": "titanicTestPlot",
                          "label" : null
                      }
            responses:
              '201':
                description: Return the location link from created image plot 
                content:
                  application/json:
                    schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'The location from created histogram'
                    example: 
                      {
                      'result': '/api/learningOrchestra/v1/explore/histogram?titanicTrainHistogram?query={}&limit=10&skip=0'
                      }
              '409':
                  description: The outputPlotName already exists
                  content:
                    application/json:
                      schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'Error log'
                      example: 
                        {
                        'result': 'duplicated plot name'
                        }
              '406':
                description: There are conflicts with request data
                content:
                  application/json:
                    schema: 
                        type: object
                        properties:
                           result:
                             type: string
                             description: 'Error log'
                    examples:
                      invalid field:
                        value:
                          {
                            'result': 'invalid field'
                          }
                      invalid dataset name:
                        value:
                          {
                            'result': 'invalid dataset name'
                          }
                      unfinished dataset:
                        value:
                          {
                            'result': 'unfinished processing in input dataset'
                          }

          get:
              tags:
              - PCA
              summary: Read the names of the created plots
              description: Returns a list with all created images plot names.
              responses:
                '200':
                  description: An array of datasets metadata in result field
                  content:
                    application/json:
                      schema: 
                          type: object
                          properties:
                            result:
                              type: array
                              items:
                                type: string
                      example:
                         {
                          'result': [
                               "imagePlotOne",
                               "imagePlotTwo"
                               ]
                          }  
    /explore/pca/{plotName}:
      get:
        tags:
           - PCA
        summary: Read an image plot
        description: Returns the image plot of the specified plotName.

        parameters:
          - name: plotName
            in: path
            required: true
            description: the id of plot.
            schema:
              type : string

        responses:
          '200':
            description: Return the image plot
            content:
              image/png:
                 schema:
                  type: string
                  format: binary
            
          '404':
            description: Plot name does not found
            content:
              application/json:
                schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                example:
                  {
                    'result': "plot name doesn't found"
                  }
   

      delete:
        tags:
           - PCA
        summary: Delete a created image plot
        description:  Delete an existent image plot in the database.
        parameters:
          - name: plotName
            in: path
            required: true
            description: the id of image plot.
            schema:
              type : string
        responses:
          '200':
            description: Return the success message from deletion request
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The message from delete status'
                example: 
                  {'result': 'deleted file'}
          '404':
            description: Plot name does not found
            content:
              application/json:
                schema: 
                    type: object
                    properties:
                       result:
                         type: string
                         description: 'Error log'
                example:
                  {
                    'result': "plot name doesn't found"
                  }

    /builder:
        post:
          tags:
           - builder
          summary: Create a builder
          description: Create predictions for some dataset
          requestBody:
            required: True
            content:
              application/json:
               schema: 
                    type: object
                    properties:
                      trainDatasetName:
                        type: string
                      testDatasetName:
                        type: string
                      modelingCode:
                        type: string
                        description: |
                          # Environment
                            The python 3 modeling code must use the environment instances in bellow:

                            * `training_df` (Instantiated): Spark Dataframe instance of train dataset
                            * `testing_df` (Instantiated): Spark Dataframe instance of testing dataset
                            
                            
                            The modeling code must instantiate the variables in below, all instances must be transformed by pyspark VectorAssembler:

                            * `features_training` (Not Instantiated): Spark Dataframe instance for train the model
                            * `features_evaluation` (Not Instantiated): Spark Dataframe instance for evaluating trained model accuracy
                            * `features_testing` (Not Instantiated): Spark Dataframe instance for testing the model
                            In case you don't want to evaluate the model, set `features_evaluation` as `None`.
                          # Example
                          ```python
                          from pyspark.ml import Pipeline
                          from pyspark.sql.functions import (
                              mean, col, split,
                              regexp_extract, when, lit)

                          from pyspark.ml.feature import (
                              VectorAssembler,
                              StringIndexer
                          )

                          TRAINING_DF_INDEX = 0
                          TESTING_DF_INDEX = 1

                          training_df = training_df.withColumnRenamed('Survived', 'label')
                          testing_df = testing_df.withColumn('label', lit(0))
                          datasets_list = [training_df, testing_df]

                          for index, dataset in enumerate(datasets_list):
                              dataset = dataset.withColumn(
                                  "Initial",
                                  regexp_extract(col("Name"), "([A-Za-z]+)\.", 1))
                              datasets_list[index] = dataset

                          misspelled_initials = [
                              'Mlle', 'Mme', 'Ms', 'Dr',
                              'Major', 'Lady', 'Countess',
                              'Jonkheer', 'Col', 'Rev',
                              'Capt', 'Sir', 'Don'
                          ]
                          correct_initials = [
                              'Miss', 'Miss', 'Miss', 'Mr',
                              'Mr', 'Mrs', 'Mrs',
                              'Other', 'Other', 'Other',
                              'Mr', 'Mr', 'Mr'
                          ]
                          for index, dataset in enumerate(datasets_list):
                              dataset = dataset.replace(misspelled_initials, correct_initials)
                              datasets_list[index] = dataset


                          initials_age = {"Miss": 22,
                                          "Other": 46,
                                          "Master": 5,
                                          "Mr": 33,
                                          "Mrs": 36}
                          for index, dataset in enumerate(datasets_list):
                              for initial, initial_age in initials_age.items():
                                  dataset = dataset.withColumn(
                                      "Age",
                                      when((dataset["Initial"] == initial) &
                                           (dataset["Age"].isNull()), initial_age).otherwise(
                                              dataset["Age"]))
                                  datasets_list[index] = dataset


                          for index, dataset in enumerate(datasets_list):
                              dataset = dataset.na.fill({"Embarked": 'S'})
                              datasets_list[index] = dataset


                          for index, dataset in enumerate(datasets_list):
                              dataset = dataset.withColumn("Family_Size", col('SibSp')+col('Parch'))
                              dataset = dataset.withColumn('Alone', lit(0))
                              dataset = dataset.withColumn(
                                  "Alone",
                                  when(dataset["Family_Size"] == 0, 1).otherwise(dataset["Alone"]))
                              datasets_list[index] = dataset


                          text_fields = ["Sex", "Embarked", "Initial"]
                          for column in text_fields:
                              for index, dataset in enumerate(datasets_list):
                                  dataset = StringIndexer(
                                      inputCol=column, outputCol=column+"_index").\
                                          fit(dataset).\
                                          transform(dataset)
                                  datasets_list[index] = dataset


                          non_required_columns = ["Name", "Embarked", "Sex", "Initial"]
                          for index, dataset in enumerate(datasets_list):
                              dataset = dataset.drop(*non_required_columns)
                              datasets_list[index] = dataset


                          training_df = datasets_list[TRAINING_DF_INDEX]
                          testing_df = datasets_list[TESTING_DF_INDEX]

                          assembler = VectorAssembler(
                              inputCols=training_df.columns[:],
                              outputCol="features")
                          assembler.setHandleInvalid('skip')

                          features_training = assembler.transform(training_df)
                          (features_training, features_evaluation) =\
                              features_training.randomSplit([0.8, 0.2], seed=33)
                          features_testing = assembler.transform(testing_df)
                          ```
                      classifiersList:
                        type: array
                        items:
                          type: string
                        description: |
                          # List of Classifiers
                          * `LR`: LogisticRegression
                          * `DT`: DecisionTreeClassifier
                          * `RF`: RandomForestClassifier
                          * `GB`: Gradient-boosted tree classifier
                          * `NB`: NaiveBayes
               example:
                  {
                      "trainDatasetName": "titanicTrain",
                      "testDatasetName": "titanicTest",
                      "modelingCode": "Python3 code to preprocessing, using Pyspark library",
                      "classifiersList": ["LR", "DT", "RF"]
                  }
          responses:
            '201':
              description: Return the location links from created predictions 
              content:
                application/json:
                  schema: 
                    type: object
                    properties:
                       result:
                         type: array
                         items:
                           type: string
                         description: 'The location from created predictions'
                  example: 
                    {
                    'result': [
                      '/api/learningOrchestra/v1/builder?titanicTestLR?query={}&limit=10&skip=0',
                      '/api/learningOrchestra/v1/builder?titanicTestDT?query={}&limit=10&skip=0',
                      '/api/learningOrchestra/v1/builder?titanicTestRF?query={}&limit=10&skip=0',
                      ]
                    }
            '406':
              description: There are conflicts with request data
              content:
                application/json:
                  schema: 
                      type: object
                      properties:
                         result:
                           type: string
                           description: 'Error log'
                  examples:
                    invalid classifier name:
                      value:
                        {
                          'result': 'invalid classifier name'
                        }
                    invalid dataset name:
                      value:
                        {
                          'result': 'invalid dataset name'
                        }
                    unfinished dataset:
                      value:
                        {
                          'result': 'unfinished processing in input dataset'
                        }
                    
        get:
            tags:
            - builder
            summary: List all builder predictions metadata
            description: Returns an array of predictions metadata, where each dataset contains a metadata file.

            responses:
              '200':
                description: An array of predictions metadata in result field
                content:
                  application/json:
                    schema: 
                        $ref: '#/components/schemas/datasetMetadata'
                    example:
                       {
                        'result': [
                             {
                                "fields": [
                                    "PassengerId",
                                    "Survived",
                                    "Pclass",
                                    "Name",
                                    "Cabin",
                                    "Embarked"
                                ],
                                "parentDatasetName": ["titanicTrain", "titanicTest"],
                                "classifier": "LR",
                                "datasetName": "titanicTestLR",
                                "finished": true,
                                "type": "builder",
                                "timeCreated": "2020-07-28T22:16:10-00:00",
                                "url": "https://filebin.net/rpfdy8clm5984a4c/titanic_training.csv?t=gcnjz1yo"
                            }
                          ]
                        }  
    /builder/{predictionName}:
      get:
        tags:
           - builder
        summary: List builder dataset content
        description:  Returns rows of the projection requested, with pagination, the first row in the query is always the metadata file.
        parameters:
          - name: predictionName
            in: path
            required: true
            description: the id of builder prediction.
            schema:
              type : string
          - name: skip
            in: query
            required: true
            description: the amount of rows to skip in pagination.
            schema:
              type : number
          - name: limit
            in: query
            required: true
            description: the amount of rows to limit after skipped rows in pagination, maximum limit to 20 rows.
            schema:
              type : number
          - name: query
            in: query
            required: true
            description: Query to find documents, if only pagination is requested, query should be empty curly brackets query={}.
            schema:
              type : string

        responses:
          '200':
            description: The paginated rows of a dataset
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: array
                       items: 
                         type: object
                       description: 'The rows from requested dataset'
                  example:
                    {
                      "result": [
                        {
                          "Pclass": "3",
                          "Sex": "male",
                          "SibSp": "0",
                          "Survived": "0",
                          "Ticket": "373450",
                          "_id": 5
                        }
                      ]
                    }
        
      delete:
        tags:
           - builder
        summary: Delete a created prediction
        description:  Delete an existent builder prediction in the database.
        parameters:
          - name: predictionName
            in: path
            required: true
            description: the id of prediction.
            schema:
              type : string
        responses:
          '200':
            description: Return the success message from deletion request
            content:
              application/json:
                schema: 
                  type: object
                  properties:
                     result:
                       type: string
                       description: 'The message from delete status'
                example: 
                  {'result': 'deleted file'}

                  

                  
  tags:
    - name: dataset
      description: The dataset resource is used to manages datasets, datasets are downloaded in CSV format and parsed into JSON format where the primary key for each document is the datasetName field contained in the JSON file.
    - name: projection
      description: The projection resource makes a projection from dataset inserted in dataset resource, generating a new dataset, and also manages this generated dataset.
    - name: dataType
      description: The dataType resource changes the fields data type from stored resources between number and string.
    - name: histogram
      description: The histogram resource makes a histogram from a stored file, storing the resulting histogram in a new dataset.
    - name: t-SNE
      description: The T-distributed Stochastic Neighbor Embedding (t-SNE) is a machine learning algorithm for visualization.
      externalDocs:
        url: https://en.wikipedia.org/wiki/T-distributed_stochastic_neighbor_embedding
    - name: PCA
      description: PCA is used to decompose a multivariate dataset in a set of successive orthogonal components that explain a maximum amount of the variance.
      externalDocs:
        url: https://scikit-learn.org/stable/modules/decomposition.html#pca
    - name: builder
      description: The builder resource join several steps of machine learning workflow (transform, tune, train and evaluate) acoupling in a unique resouce, builder creates several model predictions using your own modeling code using a defined set of classifiers.

      

      
  components:
    schemas:
      datasetMetadata:
        type: object
        properties:
          result:
            type: array
            items:
              type: object
              properties:
               fields:
                 type: array
                 items:
                   type: string
                 description: 'The dataset fields'
               datasetName:
                 type: string
                 description: 'The identification name of dataset'
               finished:
                 type: boolean
                 description: 'A flag with request processing status'
               type:
                 type: string
                 description: 'the entity which dataset belongs'
               timeCreated:
                 type: string
                 description: "A string whit formated time"
               url:
                 type: string
                 description: "The URL used to download this dataset"





      
    
contentType: yaml
